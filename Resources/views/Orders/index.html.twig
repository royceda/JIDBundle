{# src/Arii/JIDBundle/Resources/views/Default/history.html.twig #}
{% extends "AriiJIDBundle::layout.html.twig" %}
{% block body %}
<script type="text/javascript">
var max_history = 0; // pas d'historique
var chained = 0; // que des chaines normales
var only_warning = 0;
var update = 30;
var autorefresh;
var status;
var sort="last";


var myDonut;
var myGridToolbar;
var status;

var myTabbar;
var calTo;
var calFrom;
//var myFormDate;
var details;
var chainDetails;

dhtmlxEvent(window,"load",function(){

    globalLayout = new dhtmlXLayoutObject(document.body,"3U");
    globalLayout.cells("c").setHeight(680);
    globalLayout.cells("a").setWidth(350);
    globalLayout.cells("a").hideHeader();
    globalLayout.cells("b").hideHeader();
    globalLayout.cells("c").hideHeader();
    //globalLayout.cells("c").hideHeader();



    globalMenu = globalLayout.cells("a").attachMenu();
    globalMenu.setIconsPath( "{{ asset('/bundles/ariicore/images/menu/') }}" );
    globalMenu.loadStruct("{{ url('xml_menu') }}?route={{ app.request.attributes.get('_route') }}");


    myTabs = globalLayout.cells("a").attachTabbar();
    myTabs.addTab("a1","{{ "Welcome" | trans }}","100px", null, true);
    myTabs.addTab("a2","{{ "Advanced" | trans }}","100px", null, true);

    myFormDate = myTabs.cells("a2").attachForm();
    myFormDate.loadStruct("{{url('xml_JID_job_date_form')}}");

    myRibbon = myTabs.cells("a1").attachRibbon();
    myTabs.cells("a1").setActive();
    myRibbon.setIconPath( "{{ asset('bundles/ariicore/images/ribbon/') }}" );
    myRibbon.loadStruct("{{ url('json_JID_ribbon') }}");
    myRibbon.attachEvent("onStateChange", StateRibbon );
    myRibbon.attachEvent("onClick", ClickRibbon );

    myFormDate = myTabs.cells("a2").attachForm();
    myFormDate.loadStruct("{{url('xml_JID_job_date_form')}}");

    myFormDate.attachEvent("onXLE", function (name, value){
      calFrom = myFormDate.getCalendar("start_date");
      calTo = myFormDate.getCalendar("end_date");
      var date2 = calTo.getFormatedDate();
      var date1 = calFrom.getFormatedDate();
      calTo.setSensitiveRange(date1, null);
      calFrom.setSensitiveRange(null, date2);
    });


    myFormDate.attachEvent("onChange", function (name, value){
      calFrom = myFormDate.getCalendar("start_date");
      calTo = myFormDate.getCalendar("end_date");
      var date2 = calTo.getFormatedDate();
      var date1 = calFrom.getFormatedDate();
      calTo.setSensitiveRange(date1, null);
      calFrom.setSensitiveRange(null, date2);
    });


    myFormDate.attachEvent("onButtonClick",function(id){
      switch (id) {
        case 'proceed':
           globalLayout.cells("c").progressOn();
           calFrom = myFormDate.getCalendar("start_date");
           calTo = myFormDate.getCalendar("end_date");
           var date2 = calTo.getFormatedDate();
           var date1 = calFrom.getFormatedDate();
           DateRefresh(date1, date2);
           break;
        default:
           alert(id);
           break;
      }
    });


  /*  myRibbon = globalLayout.cells("a").attachRibbon();
    myRibbon.setIconPath( "{{ asset('bundles/ariicore/images/ribbon/') }}" );
    myRibbon.loadStruct("{{ url('json_JID_ribbon') }}" , function() {
      myCalendarFrom = new dhtmlXCalendarObject(myRibbon.getInput("calendar_from"));
      myCalendarFrom.setDateFormat("%Y-%m-%d %H:%i:%s");
      myCalendarFrom.setWeekStartDay(1);
      myRibbon.setValue("calendar_from", myCalendarFrom.getFormatedDate());

      myCalendarTo = new dhtmlXCalendarObject(myRibbon.getInput("calendar_to"));
      myCalendarTo.setDateFormat("%Y-%m-%d %H:%i:%s");
      myCalendarTo.setWeekStartDay(1);
      myRibbon.setValue("calendar_to", myCalendarTo.getFormatedDate());

      var date2 = myCalendarTo.getFormatedDate();
      var date1 = myCalendarFrom.getFormatedDate();
      myCalendarTo.setSensitiveRange(date1, null);
      myCalendarFrom.setSensitiveRange(null, date2);

      myCalendarFrom.attachEvent("onStateChange",function (name, value){
        var date2 = myCalendarTo.getFormatedDate();
        var date1 = myCalendarFrom.getFormatedDate();
        myCalendarTo.setSensitiveRange(date1, null);
        myCalendarFrom.setSensitiveRange(null, date2);
      });

      myCalendarTo.attachEvent("onStateChange",function (name, value){
        var date2 = myCalendarTo.getFormatedDate();
        var date1 = myCalendarFrom.getFormatedDate();
        myCalendarTo.setSensitiveRange(date1, null);
        myCalendarFrom.setSensitiveRange(null, date2);
      });
    });


    myRibbon.attachEvent("onStateChange", StateRibbon );
    myRibbon.attachEvent("onClick", ClickRibbon );
*/



    myGridMenu = new dhtmlXMenuObject(null);
    myGridMenu.setIconsPath( "{{ asset('/bundles/ariicore/images/wa/') }}" );
    myGridMenu.renderAsContextMenu();
    myGridMenu.loadStruct("{{ url('xml_JID_orders_grid_menu') }}");







    //myAccordion = globalLayout.cells("a").attachAccordion();


    /*//myAccordion.addItem("a1", "{{ "Status" | trans }}");
    // myAccordion.addItem("a2", "{{ "Folders" | trans }}");

    /*    myTree = myAccordion.cells("a2").attachTree();
    //    myTree = globalLayout.cells("a").attachTree();
    myTree.setImagesPath("{{ asset('bundles/ariicore/images/tree/') }}");
    myTree.attachEvent("onDblClick", function(id){
    globalLayout.cells("a").progressOn();
    GlobalRefresh();
  });
  */

    myGrid = globalLayout.cells("c").attachGrid();
    myGrid.selMultiRows = true;
    myGrid.setImagePath( "{{ asset('bundles/ariicore/images/treegrid/') }}");
    myGrid.setHeader("{{ "Spooler" | trans }},{{ "Folder" | trans }},{{ "Chain" | trans }},{{ "Order" | trans }},{{ "State" | trans }},{{ "Status" | trans }},{{ "Begin" | trans }},{{ "End" | trans }},{{ "Next" | trans }},{{ "Information" | trans }}");
    myGrid.attachHeader("#select_filter,#text_filter,#text_filter,#text_filter,#text_filter,#select_filter,#text_filter,#text_filter,#text_filter,#text_filter");

    myGrid.enableColumnAutoSize(true);
    myGrid.setInitWidths("150,280,280,350,170,150,160,160,160,200");
    myGrid.setColAlign("left,left,left,left,left,center,right,right,right,left");
    myGrid.setColTypes("ro,ro,ro,ro,ro,ro,ro,ro,ro,ro");
    myGrid.setColSorting("str,str,str,str,str,str,date,date,date,str");
    myGrid.enableContextMenu(myGridMenu);
    myGrid.attachEvent("onBeforeContextMenu", onShowMenu );


    myGrid.init();
    myGrid.setColumnHidden(0,true);
    myGrid.setColumnHidden(7,true);
    myGrid.setColumnHidden(8,true);
    myGrid.enableSmartRendering(true,15);
    myGrid.load( "{{ url('xml_JID_orders_grid') }}?chained="+chained+"&only_warning="+only_warning+"&sort="+sort);
    myGrid.attachEvent("onRowDblClicked",OrderDetail );

    myGrid.attachEvent("onXLS", function(){
      globalLayout.cells("c").progressOn();
    });

    myGrid.attachEvent("onXLE", function(grid, nbrRows){
      globalLayout.cells("c").progressOff();
    });


    myGridToolbar = globalLayout.cells("c").attachToolbar();
    myGridToolbar.setIconsPath("{{ asset('bundles/ariicore/images/toolbar/') }}");
    myGridToolbar.loadStruct( "{{ url('xml_JID_orders_grid_toolbar') }}");
    myGridToolbar.attachEvent("onClick",function(itemid){
         switch (itemid) {
            case 'refresh':
                globalLayout.cells("c").progressOn();
                GlobalRefresh();
                break;
            case "print":
                myGrid.printView();
                break;
            case "rss":
                document.location.href = "{{ url('rss_JID_history_orders') }}";
                break;
            default:
                if (itemid.substr(0,5)==='sort_') {
                    sort = itemid.substr(5);
                    globalLayout.cells("c").progressOn();
                    GlobalRefresh();
                }
                else {
                    alert(itemid);
                }
                break;
        }
    });
    myGridToolbar.attachEvent("onStateChange",function(itemid, state){
         switch (itemid) {
            case 'show_spooler':
                myGrid.setColumnHidden(0,!state);
                break;
            case 'show_time':
                myGrid.setColumnHidden(7,!state);
                myGrid.setColumnHidden(8,!state);
                break;
            case 'gantt':
                myGrid.setColumnHidden(5,state);
                myGrid.setColumnHidden(6,state);
                myGrid.setColumnHidden(7,state);
                myGrid.setColumnHidden(8,state);
                myGrid.setColumnHidden(9,!state);
                break;
            default:
                alert(itemid);
                break;
        }
    });

    myGridMenu.attachEvent("onClick", function (menuitemId, type) {
        var data = myGrid.contextID.split("_");
        var rId = data[0];
        var cInd = data[1];
        spooler = myGrid.cells(rId,0).getValue();
        switch (menuitemId) {
           case "spooler_go":
                window.open('/js/'+spooler+'/', spooler);
                break;
           case "show_info":
                JobInfo( rId );
            break;
            case "doc":
                window.open('{{ url('arii_JID_job_doc') }}?id='+rId,'arii_doc');
                break;
           case "job_history":
                document.location.href = "{{ url('arii_JID_history_job') }}?id="+rId;
            break;
           case "order_view":
                document.location.href = "{{ url('arii_JID_order') }}?id="+rId;
            break;
           case "order_history":
                document.location.href = "{{ url('arii_JID_order_history') }}?id="+rId;
            break;
            case "show_why":
                ShowWhy( rId);
                break;
            case "pause_spooler":
                Spooler("{{ url('arii_XML_Command') }}?command=pause_spooler&spooler_id",spooler);
                break;
            case "continue_spooler":
                Spooler("{{ url('arii_XML_Command') }}?command=continue_spooler&spooler_id",spooler);
                break;
            case "check_spooler":
                // Spooler("{{ url('arii_JID_spooler_update') }}?id",spooler);
                CheckSpooler(spooler);
                break;
            case "terminate_spooler":
                Spooler("{{ url('arii_XML_Command') }}?command=restart_spooler&spooler_id",spooler);
                break;
            case "abort_spooler":
                Spooler("{{ url('arii_XML_Command') }}?command=abort_spooler&spooler_id",spooler);
                break;
            case "purge_job":
                PurgeJob( rId );
            break;
            case "order_detail":
                OrderDetail( rId );
            break;
            case "stop_node":
                nId = mygrid.getUserData(rId,'TASK_ID');
                Node(rId,nId,menuitemId,"{{ "Stop node" | trans }}",null);
                break;
            case "unstop_node":
                nId = mygrid.getUserData(rId,'TASK_ID');
                Node(rId,nId,menuitemId,"{{ "Unstop node" | trans }}",null);
                break;
            case "skip_node":
                nId = mygrid.getUserData(rId,'TASK_ID');
                Node(rId,nId,menuitemId,"{{ "Skip node" | trans }}",null);
                break;
            case "unskip_node":
                nId = mygrid.getUserData(rId,'TASK_ID');
                Node(rId,nId,menuitemId,"{{ "Unskip node" | trans }}",null);
                break;
            case "suspend_order":
            case "resume_order":
                    alert(menuitemId);
                break;
            case "reset_order":
                XMLCommand(rId,menuitemId);
                break;
            default:
                alert("inconnu ! "+menuitemId);
        }
        return true;
    });


    var myTabbar = globalLayout.cells("b").attachTabbar();
    myTabbar.addTab("order","{{ "Order" | trans }}","100px", null, true);
    myTabbar.addTab("chain","{{ "Chain" | trans }}","100px" );
    myTabbar.addTab("log","{{ "Log" | trans }}","100px");
    myTabbar.addTab("history","{{ "History" | trans }}","100px");
    myTabbar.addTab("status","{{"Status" | trans}}", "100px");

    myTabbar.addTab("Detail1","{{"Order detail" | trans}}", "150px");
    myTabbar.addTab("Detail2","{{"Chain detail" | trans}}", "150px");



    details = myTabbar.cells("Detail1").attachTree();
    details.setImagesPath("{{ asset('bundles/ariicore/images/tree/') }}");
    //details.load("{{ url('xml_JID_order_test') }}");
    details.attachEvent("onXLE", function(){
      details.openAllItems("spooler");
    });


    chainDetails = myTabbar.cells("Detail2").attachTree();
    chainDetails.setImagesPath("{{ asset('bundles/ariicore/images/tree/') }}");
    //chainDetails.load("{{ url('xml_JID_order_test') }}+?id=325686");
    chainDetails.attachEvent("onXLE", function(){
      chainDetails.openAllItems("spooler");
    });





    myDonut =  myTabbar.cells("status").attachChart({
      view:"donut",
      container:"pie_chart_container",
      value:"#JOBS#",
      label:"",
      tooltip: "#STATUS#",
      color: "#COLOR#",
      border:false,
      pieInnerText: "#JOBS#",
      shadow: 0,
      legend:{
        width: 0,
        template: "#STATUS#",
        valign:"top",
        align:"left"
      }
    });
    myDonut.load( "{{ url('xml_JID_orders_pie') }}?chained="+chained+"&only_warning="+only_warning );

    myDonut.attachEvent("onItemClick",function(id, value){
        status = id;
        myGrid.filterBy(5, status);
        myGrid.getFilterElement(5).value = status;
    });


    var myDetailLayout = myTabbar.cells("order").attachLayout("2U");
    myDetailLayout.cells("a").hideHeader();
    myDetailLayout.cells("b").hideHeader();

    myForm = myDetailLayout.cells("a").attachForm();
    myForm.loadStruct("{{ url('json_JID_orders_form') }}");

    myDetailToolbar = myDetailLayout.cells("a").attachToolbar();
    myDetailLayout.cells("a").setWidth(650);
    myDetailToolbar.setIconsPath("{{ asset('bundles/ariicore/images/toolbar/') }}");
    myDetailToolbar.loadStruct( "{{ url('xml_JID_orders_form_toolbar') }}" , function(){
        GBCalendar = new dhtmlXCalendarObject(myDetailToolbar.getInput('ref_date'));
        GBCalendar.setDateFormat("%Y-%m-%d %H:%i:%s");
        GBCalendar.setWeekStartDay(1);
        this.hideItem('resume_order');
        this.hideItem('remove_setback');
    });

    myDetailToolbar.attachEvent("onClick",function(itemid){
        Text = '';
        var id = myForm.getItemValue('HISTORY_ID');
        switch(itemid) {
           case "order_view":
                document.location.href = "{{ url('arii_JID_order') }}?id="+rId;
                return true;
                break;
            case "modify_order":
                Text = "{{ "Restart order" | trans }}";
                break;
            case "suspend_order":
                Text = "{{ "Suspend order" | trans }}";
                break;
            case "resume_order":
                Text = "{{ "Resume order" | trans }}";
                break;
        }
        switch(itemid) {
            case "start_order":
            case "modify_order":
            case "suspend_order":
            case "resume_order":
                var params = new Array();
                myParameters.forEachRow(function(id){
                    var param = myParameters.cells(id,0).getValue() + "=" + encodeURIComponent(myParameters.cells(id,1).getValue());
                    params.push(param);
                });
                var paramsStr = params.join(",");
                var start_time = '';
                start_time = myDetailToolbar.getValue("ref_date");
                // alert("{{ url('arii_XML_Command') }}?command="+itemid+"&params="+encodeURIComponent(params)+"&time="+start_time+"&order_id="+id);
                dhtmlx.message({
                type: "Notice",
                text: Text });
                globalLayout.cells("a").progressOn();
                globalLayout.cells("c").progressOn();
                dhx4.ajax.post("{{ url('arii_XML_Command') }}","command="+itemid+"&params="+encodeURIComponent(params)+"&time="+start_time+"&order_id="+id,function(loader,response){
                    dhtmlx.message({
                    type: "Notice",
                    expire: 10000,
                    width: "500px",
                    text: loader.xmlDoc.responseText });
                    OrderDetail(id);
                    GlobalRefresh();
                });
                break;
            default:
                alert(itemid);
                break;
        }
        return true;
    });

    var myParametersToolbar = myDetailLayout.cells("b").attachToolbar();
    myParametersToolbar.setIconsPath("{{ asset('bundles/ariicore/images/toolbar/') }}");
    myParametersToolbar.loadStruct("{{ url('xml_JID_job_params_toolbar') }}");

    myParameters = myDetailLayout.cells("b").attachGrid();
    myParameters.selMultiRows = true;
    myParameters.setHeader("{{ "Parameter" | trans }},{{ "Value" | trans }}");
    myParameters.setColTypes("ed,ed");
    myParameters.setInitWidths("*,*");
    myParameters.init();

    myChainDetail =  myTabbar.cells("chain").attachLayout("2U");
    // myChainDetail.cells("a").setText("{{ "Steps" | trans }}");
    myChainDetail.cells("a").hideHeader();
    // myChainDetail.cells("b").setText("{{ "Graph" | trans }}");
    myChainDetail.cells("b").hideHeader();

    myChainToolbar = myChainDetail.cells("a").attachToolbar();
    myChainToolbar.setIconsPath("{{ asset('bundles/ariicore/images/toolbar/') }}");
    myChainToolbar.loadStruct( "{{ url('xml_JID_orders_chain_toolbar') }}" );

    myChainToolbar.attachEvent("onClick",function(itemid){
        var id = myForm.getItemValue('HISTORY_ID');
        switch (itemid) {
            case "refresh":
                break;
            case "stop_chain":
                Text = "{{ "Stop chain" | trans }}";
                break;
            case "unstop_chain":
                Text = "{{ "Unstop chain" | trans }}";
                break;
        }
        switch (itemid) {
            case "stop_chain":
            case "unstop_chain":
                dhtmlx.message({
                type: "Notice",
                text: Text });
//                alert("{{ url('arii_XML_Command') }}?command="+itemid+"&order_id="+id);
                dhx4.ajax.post("{{ url('arii_XML_Command') }}","command="+itemid+"&order_id="+id,function(loader,response){
                    dhtmlx.message({
                    type: "Notice",
                    expire: 10000,
                    width: "500px",
                    text: loader.xmlDoc.responseText });
                    globalLayout.progressOn();
                    GlobalRefresh();
                    if (itemid=='stop_chain') {
                        myChainToolbar.hideItem('stop_chain');
                        myChainToolbar.showItem('unstop_chain');
                    }
                    else {
                        myChainToolbar.hideItem('stop_chain');
                        myChainToolbar.showItem('unstop_chain');
                    }
                });
                break;
        }
    });

    mySteps = myChainDetail.cells("a").attachGrid();
    mySteps.setHeader("{{ "Step" | trans }},{{ "State" | trans }},{{ "Status" | trans }},{{ "Begin" | trans }},{{ "End" | trans }},{{ "Error" | trans }},{{ "Code" | trans }},{{ "Message" | trans }}");
    mySteps.attachHeader("#numeric_filter,#select_filter,#select_filter,#text_filter,#text_filter,#select_filter,#select_filter,#text_filter");
    mySteps.setInitWidths("80,*,120,160,160,60,60,200");
    mySteps.setColAlign("right,left,left,right,right,right,right,left");
    mySteps.setColTypes("ro,ro,ro,ro,ro,ro,ro,ro");
    mySteps.setColSorting("int,str,str,date,date,int,str,str");
    mySteps.setColumnHidden(4,true);
    mySteps.setColumnHidden(5,true);
    mySteps.setColumnHidden(6,true);
    mySteps.enableAlterCss("","");
    mySteps.init();

    myLog = myTabbar.cells("log").attachGrid();
    myLog.setHeader("{{ "Date" | trans }},{{ "Type" | trans }},{{ "Message" | trans }},{{ "Code" | trans }}");
    myLog.attachHeader("#text_filter,#select_filter,#text_filter,#select_filter");
    myLog.setInitWidths("160,200,*,60");
    myLog.setColAlign("right,left,left,right");
    myLog.setColTypes("ro,ro,ro,ro");
    myLog.setColSorting("date,str,str,int");
    myLog.init();
    myLog.enableSmartRendering(true,50);

    myHistory = myTabbar.cells("history").attachGrid();
    myHistory.setHeader("{{ "Start" | trans }},{{ "End" | trans }},{{ "State" | trans }},!,{{ "Message" | trans }}");
    myHistory.attachHeader("#text_filter,#text_filter,#select_filter,#select_filter,#text_filter");
    myHistory.setInitWidths("160,160,150,40,*");
    myHistory.setColAlign("right,right,right,center,left");
    myHistory.setColTypes("ro,ro,ro,ro,ro");
    myHistory.setColSorting("date,date,str,str,str");
    myHistory.init();
    myHistory.enableSmartRendering(true,50);
    myHistory.enableAlterCss("","");

    myParametersToolbar.attachEvent("onClick",function(itemid){
        switch(itemid) {
            case "new":
                myParameters.addRow(myParameters.getRowsNum()+1,"");
                break;
            default:
                break;
        }
        return true;
    });

    autorefresh = setInterval( "GlobalRefresh()", update*1000 );
});


function DateRefresh(date1, date2){
  //alert("from "+date1+" to "+date2);
  var tmp = "true"
  var route = "{{ url('xml_JID_job_grid_date', {'date1' : 'date1', 'date2':'date2'}) }}";
  route = route.replace("date1", date1);
  route = route.replace("date2", date2);
  //alert(route);


  //a changer car duplication de code de refresh
  globalLayout.cells("c").progressOn();
  myGrid.load(route,function(){
    globalLayout.cells("c").progressOff();
    myGrid.refreshFilters();
    myGrid.filterByAll();
    myGrid.filterBy(4, status);
    myDonut.load( "{{ url('xml_JID_jobs_pie') }}?chained="+chained+"&only_warning="+only_warning, function () {
      myDonut.refresh();
      globalLayout.progressOff();
      myTabbar.cells("b4").progressOff();
      myTree.smartRefreshBranch(0,"{{ url('xml_JID_jobs_tree') }}?chained="+chained+"&only_warning="+only_warning);
    });
  });



/*
  myGrid.load(route,function(){
    globalLayout.cells("c").progressOff();
    myGrid.refreshFilters();
    myGrid.filterByAll();
    myGrid.filterBy(4, status);


    myGrid.load("{{ url('xml_JID_orders_grid') }}?time="+seconds+"&history="+max_history+"&chained="+chained+"&only_warning="+only_warning+"&sort="+sort, function () {
      myDonut.refresh();
      globalLayout.cells("b").progressOff();




      myTabbar.cells("b4").progressOff();
      //myTree.smartRefreshBranch(0,"{{ url('xml_JID_jobs_tree') }}?chained="+chained+"&only_warning="+only_warning);
    });
  });
*/
  //document.location = route;
  //execute(route);
}


function GlobalRefresh() {
  GridRefresh();
}


function GridRefresh(detail) {

    clearInterval( autorefresh );
    detail = typeof detail !== 'undefined' ? detail : 0;
    var currentTime = new Date();
    var hours = currentTime.getHours();
    var minutes = currentTime.getMinutes();
    var seconds = currentTime.getSeconds();
    if (minutes < 10){
      minutes = "0" + minutes;
    }
    if (seconds < 10){
      seconds = "0" + seconds;
    }
    myRibbon.setItemText( "refresh", hours + ":" + minutes + ":" +  seconds );
    myGrid.load("{{ url('xml_JID_orders_grid') }}?time="+seconds+"&history="+max_history+"&chained="+chained+"&only_warning="+only_warning+"&sort="+sort, function(){
      globalLayout.cells("c").progressOff();
      myGrid.filterBy(5, status);
      if (detail>0) OrderDetail(id);
      myDonut.load( "{{ url('xml_JID_orders_pie') }}?chained="+chained+"&only_warning="+only_warning,
      function () {
        myDonut.refresh();
      });
      globalLayout.progressOff();
      globalLayout.cells("a").progressOff();
      myGrid.filterByAll();
      autorefresh = setInterval( "GridRefresh()", update*1000 );
    });
  }

  function OrderDetail(id) {
    clearInterval( autorefresh );
    globalLayout.cells("b").progressOff(); //car ne se desactive pas
    myForm.load("{{ url('xml_JID_order_form') }}?id="+id);


    //details = myTabbar.cells("Detail1").attachTree();
    details.deleteChildItems(0);
    details.setImagesPath("{{ asset('bundles/ariicore/images/tree/') }}");
    details.load("{{ url('xml_JID_order_info')}}?id="+id+"&type=order" , function(id){
      globalLayout.cells("b").progressOff();
    });

    //details = myTabbar.cells("Detail1").attachTree();
    chainDetails.deleteChildItems(0);
    chainDetails.setImagesPath("{{ asset('bundles/ariicore/images/tree/') }}");
    chainDetails.load("{{ url('xml_JID_order_info')}}?id="+id+"&type=chain" , function(id){
      globalLayout.cells("b").progressOff();
    });



    // mise a jour de la toolbar
    var status = myGrid.cells(id, 5 ).getValue();
    myDetailToolbar.showItem('add_order');
    myDetailToolbar.showItem('suspend_order');
    myDetailToolbar.showItem('resume_order');
    myChainToolbar.showItem('stop_chain');
    myChainToolbar.showItem('unstop_chain');
    if (status== 'SUSPENDED') {
        myDetailToolbar.hideItem('suspend_order');
    }
    else if (status== 'CHAIN STOP.') {
        myChainToolbar.hideItem('stop_chain');
    }
    else {
        myChainToolbar.hideItem('unstop_chain');
        myDetailToolbar.hideItem('resume_order');
    }
    myParameters.load("{{ url('xml_JID_order_params') }}?id="+id, function() {
        mySteps.clearAndLoad("{{ url('xml_JID_order_steps') }}?id="+id, function() {
            myLog.clearAndLoad("{{ url('xml_JID_order_log') }}?id="+id, function () {
                myHistory.clearAndLoad("{{ url('xml_JID_order_history') }}?id="+id, function() {
                    myChainDetail.cells("c").attachURL("{{ url('svg_JID_process_steps') }}?id="+id);
                    globalLayout.cells("b").progressOff();
                    autorefresh = setInterval( "GridRefresh()", update*1000 );
                });
            });
        });
  });
}

function onShowMenu(rowId, celInd, grid) {

    var status = grid.cells(rowId, 3 ).getValue();

    // si on est operator
    {% if is_granted('ROLE_OPERATOR') %}
    if (status !=='RUNNING') {
        myGridMenu.hideItem('kill_task');
    }
    else {
        myGridMenu.showItem('kill_task');
    }
    if (status !=='QUEUED')  {
        myGridMenu.hideItem('delete_task');
    }
    else {
        myGridMenu.showItem('delete_task');
    }
    // job stoppé
    if ((grid.cells(rowId, 3).getValue()== 'STOPPED')
         || (grid.cells(rowId, 3).getValue()== 'STOPPING') ){
        myGridMenu.hideItem("stop_job");
        myGridMenu.showItem("unstop_job");
    }
    else {
        myGridMenu.hideItem("unstop_job");
        myGridMenu.showItem("stop_job");
    }
    {% else %}
        myGridMenu.hideItem('start_job');
        myGridMenu.hideItem('kill_task');
        myGridMenu.hideItem('stop_job');
        myGridMenu.hideItem('unstop_job');
        myGridMenu.hideItem('pause_spooler');
        myGridMenu.hideItem('continue_spooler');
    {% endif %}
 return true;
}
</script>
{% endblock %}
